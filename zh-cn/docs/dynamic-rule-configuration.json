{
  "filename": "dynamic-rule-configuration.md",
  "__html": "<h1>动态规则扩展</h1>\n<h2>规则</h2>\n<p>Sentinel 的理念是开发者只需要关注资源的定义，当资源定义成功后可以动态增加各种流控降级规则。Sentinel 提供两种方式修改规则：</p>\n<ul>\n<li>通过 API 直接修改 (<code>loadRules</code>)</li>\n<li>通过 <code>DataSource</code> 适配不同数据源修改</li>\n</ul>\n<p>通过 API 修改比较直观，可以通过以下几个 API 修改不同的规则：</p>\n<pre><code class=\"language-Java\">FlowRuleManager.loadRules(List&lt;FlowRule&gt; rules); <span class=\"hljs-comment\">// 修改流控规则</span>\nDegradeRuleManager.loadRules(List&lt;DegradeRule&gt; rules); <span class=\"hljs-comment\">// 修改降级规则</span>\n</code></pre>\n<p>手动修改规则（硬编码方式）一般仅用于测试和演示，生产上一般通过动态规则源的方式来动态管理规则。</p>\n<h2>DataSource 扩展</h2>\n<p>上述 <code>loadRules()</code> 方法只接受内存态的规则对象，但更多时候规则存储在文件、数据库或者配置中心当中。<code>DataSource</code> 接口给我们提供了对接任意配置源的能力。相比直接通过 API 修改规则，实现 <code>DataSource</code> 接口是更加可靠的做法。</p>\n<p>我们推荐<strong>通过控制台设置规则后将规则推送到统一的规则中心，客户端实现</strong> <code>ReadableDataSource</code> <strong>接口端监听规则中心实时获取变更</strong>，流程如下：</p>\n<p><img src=\"https://user-images.githubusercontent.com/9434884/45406233-645e8380-b698-11e8-8199-0c917403238f.png\" alt=\"push-rules-from-dashboard-to-config-center\"></p>\n<p><code>DataSource</code> 扩展常见的实现方式有:</p>\n<ul>\n<li><strong>拉模式</strong>：客户端主动向某个规则管理中心定期轮询拉取规则，这个规则中心可以是 RDBMS、文件，甚至是 VCS 等。这样做的方式是简单，缺点是无法及时获取变更；</li>\n<li><strong>推模式</strong>：规则中心统一推送，客户端通过注册监听器的方式时刻监听变化，比如使用 <a href=\"https://github.com/alibaba/nacos\">Nacos</a>、Zookeeper 等配置中心。这种方式有更好的实时性和一致性保证。</li>\n</ul>\n<p>Sentinel 目前支持以下数据源扩展：</p>\n<ul>\n<li>Pull-based: 动态文件数据源、<a href=\"https://github.com/alibaba/Sentinel/tree/master/sentinel-extension/sentinel-datasource-consul\">Consul</a>, <a href=\"https://github.com/alibaba/Sentinel/tree/master/sentinel-extension/sentinel-datasource-eureka\">Eureka</a></li>\n<li>Push-based: <a href=\"https://github.com/alibaba/Sentinel/tree/master/sentinel-extension/sentinel-datasource-zookeeper\">ZooKeeper</a>, <a href=\"https://github.com/alibaba/Sentinel/tree/master/sentinel-extension/sentinel-datasource-redis\">Redis</a>, <a href=\"https://github.com/alibaba/Sentinel/tree/master/sentinel-extension/sentinel-datasource-nacos\">Nacos</a>, <a href=\"https://github.com/alibaba/Sentinel/tree/master/sentinel-extension/sentinel-datasource-apollo\">Apollo</a>, <a href=\"https://github.com/alibaba/Sentinel/tree/master/sentinel-extension/sentinel-datasource-etcd\">etcd</a></li>\n</ul>\n<p>流量治理标准数据源：<a href=\"./opensergo-data-source.md\">OpenSergo</a></p>\n<h3>拉模式扩展</h3>\n<p>实现拉模式的数据源最简单的方式是继承 <a href=\"https://github.com/alibaba/Sentinel/blob/master/sentinel-extension/sentinel-datasource-extension/src/main/java/com/alibaba/csp/sentinel/datasource/AutoRefreshDataSource.java\"><code>AutoRefreshDataSource</code></a> 抽象类，然后实现 <code>readSource()</code> 方法，在该方法里从指定数据源读取字符串格式的配置数据。比如 <a href=\"https://github.com/alibaba/Sentinel/blob/master/sentinel-demo/sentinel-demo-dynamic-file-rule/src/main/java/com/alibaba/csp/sentinel/demo/file/rule/FileDataSourceDemo.java\">基于文件的数据源</a>。</p>\n<h3>推模式扩展</h3>\n<p>实现推模式的数据源最简单的方式是继承 <a href=\"https://github.com/alibaba/Sentinel/blob/master/sentinel-extension/sentinel-datasource-extension/src/main/java/com/alibaba/csp/sentinel/datasource/AbstractDataSource.java\"><code>AbstractDataSource</code></a> 抽象类，在其构造方法中添加监听器，并实现 <code>readSource()</code> 从指定数据源读取字符串格式的配置数据。比如 <a href=\"https://github.com/alibaba/Sentinel/blob/master/sentinel-extension/sentinel-datasource-nacos/src/main/java/com/alibaba/csp/sentinel/datasource/nacos/NacosDataSource.java\">基于 Nacos 的数据源</a>。</p>\n<h3>注册数据源</h3>\n<p>通常需要调用以下方法将数据源注册至指定的规则管理器中：</p>\n<pre><code class=\"language-java\">ReadableDataSource&lt;String, List&lt;FlowRule&gt;&gt; flowRuleDataSource = <span class=\"hljs-keyword\">new</span> NacosDataSource&lt;&gt;(remoteAddress, groupId, dataId, parser);\nFlowRuleManager.register2Property(flowRuleDataSource.getProperty());\n</code></pre>\n<p>若不希望手动注册数据源，可以借助 Sentinel 的 <code>InitFunc</code> SPI 扩展接口。只需要实现自己的 <code>InitFunc</code> 接口，在 <code>init</code> 方法中编写注册数据源的逻辑。比如：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">package</span> com.test.init;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DataSourceInitFunc</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">InitFunc</span> </span>{\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">init</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> Exception </span>{\n        <span class=\"hljs-keyword\">final</span> String remoteAddress = <span class=\"hljs-string\">\"localhost\"</span>;\n        <span class=\"hljs-keyword\">final</span> String groupId = <span class=\"hljs-string\">\"Sentinel:Demo\"</span>;\n        <span class=\"hljs-keyword\">final</span> String dataId = <span class=\"hljs-string\">\"com.alibaba.csp.sentinel.demo.flow.rule\"</span>;\n\n        ReadableDataSource&lt;String, List&lt;FlowRule&gt;&gt; flowRuleDataSource = <span class=\"hljs-keyword\">new</span> NacosDataSource&lt;&gt;(remoteAddress, groupId, dataId,\n            source -&gt; JSON.parseObject(source, <span class=\"hljs-keyword\">new</span> TypeReference&lt;List&lt;FlowRule&gt;&gt;() {}));\n        FlowRuleManager.register2Property(flowRuleDataSource.getProperty());\n    }\n}\n</code></pre>\n<p>接着将对应的类名添加到位于资源目录（通常是 <code>resource</code> 目录）下的 <code>META-INF/services</code> 目录下的 <code>com.alibaba.csp.sentinel.init.InitFunc</code> 文件中，比如：</p>\n<pre><code>com.test.init.DataSourceInitFunc\n</code></pre>\n<p>这样，当初次访问任意资源的时候，Sentinel 就可以自动去注册对应的数据源了。</p>\n<h2>示例</h2>\n<h3>API 模式：使用客户端规则 API 配置规则</h3>\n<p><a href=\"./dashboard.md\">Sentinel Dashboard</a> 通过 Sentinel 客户端自带的规则 API 来实时查询和更改内存中的规则。</p>\n<p>注意: 要使客户端具备规则 API，需在客户端引入以下依赖：</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.alibaba.csp<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>sentienl-http-simple-transport<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>x.y.z<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></pre>\n<h3>拉模式：使用文件配置规则</h3>\n<p><a href=\"https://github.com/alibaba/Sentinel/blob/master/sentinel-demo/sentinel-demo-dynamic-file-rule/src/main/java/com/alibaba/csp/sentinel/demo/file/rule/FileDataSourceDemo.java\">这个示例</a>展示 Sentinel 是如何从文件获取规则信息的。<a href=\"https://github.com/alibaba/Sentinel/blob/master/sentinel-extension/sentinel-datasource-extension/src/main/java/com/alibaba/csp/sentinel/datasource/FileRefreshableDataSource.java\"><code>FileRefreshableDataSource</code></a> 会周期性的读取文件以获取规则，当文件有更新时会及时发现，并将规则更新到内存中。使用时只需添加以下依赖：</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.alibaba.csp<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>sentinel-datasource-extension<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>x.y.z<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></pre>\n<h3>推模式：使用 Nacos 配置规则</h3>\n<p><a href=\"https://github.com/alibaba/Nacos\">Nacos</a> 是阿里中间件团队开源的服务发现和动态配置中心。Sentinel 针对 Nacos 作了适配，底层可以采用 Nacos 作为规则配置数据源。使用时只需添加以下依赖：</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.alibaba.csp<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>sentinel-datasource-nacos<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>x.y.z<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></pre>\n<p>然后创建 <code>NacosDataSource</code> 并将其注册至对应的 RuleManager 上即可。比如：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">// remoteAddress 代表 Nacos 服务端的地址</span>\n<span class=\"hljs-comment\">// groupId 和 dataId 对应 Nacos 中相应配置</span>\nReadableDataSource&lt;String, List&lt;FlowRule&gt;&gt; flowRuleDataSource = <span class=\"hljs-keyword\">new</span> NacosDataSource&lt;&gt;(remoteAddress, groupId, dataId,\n    source -&gt; JSON.parseObject(source, <span class=\"hljs-keyword\">new</span> TypeReference&lt;List&lt;FlowRule&gt;&gt;() {}));\nFlowRuleManager.register2Property(flowRuleDataSource.getProperty());\n</code></pre>\n<p>详细示例可以参见 <a href=\"https://github.com/alibaba/Sentinel/tree/master/sentinel-demo/sentinel-demo-nacos-datasource\">sentinel-demo-nacos-datasource</a>。</p>\n<h3>推模式：使用 ZooKeeper 配置规则</h3>\n<p>Sentinel 针对 ZooKeeper 作了相应适配，底层可以采用 ZooKeeper 作为规则配置数据源。使用时只需添加以下依赖：</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.alibaba.csp<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>sentinel-datasource-zookeeper<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>x.y.z<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></pre>\n<p>然后创建 <code>ZookeeperDataSource</code> 并将其注册至对应的 RuleManager 上即可。比如：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">// remoteAddress 代表 ZooKeeper 服务端的地址</span>\n<span class=\"hljs-comment\">// path 对应 ZK 中的数据路径</span>\nReadableDataSource&lt;String, List&lt;FlowRule&gt;&gt; flowRuleDataSource = <span class=\"hljs-keyword\">new</span> ZookeeperDataSource&lt;&gt;(remoteAddress, path, source -&gt; JSON.parseObject(source, <span class=\"hljs-keyword\">new</span> TypeReference&lt;List&lt;FlowRule&gt;&gt;() {}));\nFlowRuleManager.register2Property(flowRuleDataSource.getProperty());\n</code></pre>\n<p>详细示例可以参见 <a href=\"https://github.com/alibaba/Sentinel/tree/master/sentinel-demo/sentinel-demo-zookeeper-datasource\">sentinel-demo-zookeeper-datasource</a>。</p>\n<h3>推模式：使用 Apollo 配置规则</h3>\n<p>Sentinel 针对 <a href=\"https://github.com/ctripcorp/apollo\">Apollo</a> 作了相应适配，底层可以采用 Apollo 作为规则配置数据源。使用时只需添加以下依赖：</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.alibaba.csp<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>sentinel-datasource-apollo<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>x.y.z<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></pre>\n<p>然后创建 <code>ApolloDataSource</code> 并将其注册至对应的 RuleManager 上即可。比如：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">// namespaceName 对应 Apollo 的命名空间名称</span>\n<span class=\"hljs-comment\">// ruleKey 对应规则存储的 key</span>\n<span class=\"hljs-comment\">// defaultRules 对应连接不上 Apollo 时的默认规则</span>\nReadableDataSource&lt;String, List&lt;FlowRule&gt;&gt; flowRuleDataSource = <span class=\"hljs-keyword\">new</span> ApolloDataSource&lt;&gt;(namespaceName, ruleKey, defaultRules, source -&gt; JSON.parseObject(source, <span class=\"hljs-keyword\">new</span> TypeReference&lt;List&lt;FlowRule&gt;&gt;() {}));\nFlowRuleManager.register2Property(flowRuleDataSource.getProperty());\n</code></pre>\n<p>详细示例可以参见 <a href=\"https://github.com/alibaba/Sentinel/tree/master/sentinel-demo/sentinel-demo-apollo-datasource\">sentinel-demo-apollo-datasource</a>。</p>\n"
}