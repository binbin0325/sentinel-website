{
  "filename": "quick-start.md",
  "__html": "<h1>快速开始</h1>\n<p>欢迎来到 Sentinel 的世界！这篇新手指南将指引您快速入门 Sentinel。</p>\n<p>Sentinel 的使用可以分为两个部分:</p>\n<ul>\n<li>核心库（Java 客户端）：不依赖任何框架/库，能够运行于 Java 8 及以上的版本的运行时环境，同时对 Dubbo / Spring Cloud 等框架也有较好的支持（见 <a href=\"./open-source-framework-integrations.md\">主流框架适配</a>）。</li>\n<li>控制台（Dashboard）：Dashboard 主要负责管理推送规则、监控、管理机器信息等。</li>\n</ul>\n<p>我们将会提供 <strong>本地运行 demo</strong> 和 <strong>公网 demo</strong> 来帮助新手快速入门。这两种方式都只需要您执行2到5个步骤。</p>\n<h2>本地Demo</h2>\n<h3>1. 引入 Sentinel 依赖</h3>\n<p>如果您的应用使用了 Maven，则在 <code>pom.xml</code> 文件中加入以下代码即可：</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.alibaba.csp<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>sentinel-core<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1.8.6<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></pre>\n<p>如果您未使用依赖管理工具，请到 <a href=\"https://mvnrepository.com/artifact/com.alibaba.csp/sentinel-core\">Maven Center Repository</a> 直接下载 JAR 包。</p>\n<h3>2. 定义资源</h3>\n<p><strong>资源</strong> 是 Sentinel 中的核心概念之一。最常用的资源是我们代码中的 Java 方法。\n当然，您也可以更灵活的定义你的资源，例如，把需要控制流量的代码用 Sentinel API <code>SphU.entry(&quot;HelloWorld&quot;)</code> 和 <code>entry.exit()</code> 包围起来即可。在下面的例子中，我们将 <code>System.out.println(&quot;hello world&quot;);</code> 作为资源（被保护的逻辑），用 API 包装起来。参考代码如下:</p>\n<pre><code class=\"language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n    <span class=\"hljs-comment\">// 配置规则.</span>\n    initFlowRules();\n\n    <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-keyword\">true</span>) {\n        <span class=\"hljs-comment\">// 1.5.0 版本开始可以直接利用 try-with-resources 特性</span>\n        <span class=\"hljs-keyword\">try</span> (Entry entry = SphU.entry(<span class=\"hljs-string\">\"HelloWorld\"</span>)) {\n            <span class=\"hljs-comment\">// 被保护的逻辑</span>\n            System.out.println(<span class=\"hljs-string\">\"hello world\"</span>);\n\t} <span class=\"hljs-keyword\">catch</span> (BlockException ex) {\n            <span class=\"hljs-comment\">// 处理被流控的逻辑</span>\n\t    System.out.println(<span class=\"hljs-string\">\"blocked!\"</span>);\n\t}\n    }\n}\n</code></pre>\n<p>完成以上两步后，代码端的改造就完成了。</p>\n<p>您也可以通过我们提供的 <a href=\"./annotation-support.md\">注解支持模块</a>，来定义我们的资源，类似于下面的代码：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@SentinelResource</span>(<span class=\"hljs-string\">\"HelloWorld\"</span>)\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">helloWorld</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-comment\">// 资源中的逻辑</span>\n    System.out.println(<span class=\"hljs-string\">\"hello world\"</span>);\n}\n</code></pre>\n<p>这样，<code>helloWorld()</code> 方法就成了我们的一个资源。注意注解支持模块需要配合 Spring AOP 或者 AspectJ 一起使用。</p>\n<h3>3. 定义规则</h3>\n<p>接下来，通过流控规则来指定允许该资源通过的请求次数，例如下面的代码定义了资源 <code>HelloWorld</code> 每秒最多只能通过 20 个请求。</p>\n<pre><code class=\"language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">initFlowRules</span><span class=\"hljs-params\">()</span></span>{\n    List&lt;FlowRule&gt; rules = <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;();\n    FlowRule rule = <span class=\"hljs-keyword\">new</span> FlowRule();\n    rule.setResource(<span class=\"hljs-string\">\"HelloWorld\"</span>);\n    rule.setGrade(RuleConstant.FLOW_GRADE_QPS);\n    <span class=\"hljs-comment\">// Set limit QPS to 20.</span>\n    rule.setCount(<span class=\"hljs-number\">20</span>);\n    rules.add(rule);\n    FlowRuleManager.loadRules(rules);\n}\n</code></pre>\n<p>完成上面 3 步，Sentinel 就能够正常工作了。更多的信息可以参考 <a href=\"./basic-api-resource-rule.md\">使用文档</a>。</p>\n<h3>4. 检查效果</h3>\n<p>Demo 运行之后，我们可以在日志 <code>~/logs/csp/${appName}-metrics.log.xxx</code> 里看到下面的输出:</p>\n<pre><code>|--timestamp-|------date time----|--resource-|p |block|s |e|rt\n1529998904000|2018-06-26 15:41:44|hello world|20|0    |20|0|0\n1529998905000|2018-06-26 15:41:45|hello world|20|5579 |20|0|728\n1529998906000|2018-06-26 15:41:46|hello world|20|15698|20|0|0\n1529998907000|2018-06-26 15:41:47|hello world|20|19262|20|0|0\n1529998908000|2018-06-26 15:41:48|hello world|20|19502|20|0|0\n1529998909000|2018-06-26 15:41:49|hello world|20|18386|20|0|0\n</code></pre>\n<p>其中 <code>p</code> 代表通过的请求, <code>block</code> 代表被阻止的请求, <code>s</code> 代表成功执行完成的请求个数, <code>e</code> 代表用户自定义的异常, <code>rt</code> 代表平均响应时长。</p>\n<p>可以看到，这个程序每秒稳定输出 &quot;hello world&quot; 20 次，和规则中预先设定的阈值是一样的。</p>\n<p>更详细的说明可以参考: <a href=\"./basic-api-resource-rule.md\">如何使用</a></p>\n<p>更多的例子可以参考: <a href=\"https://github.com/alibaba/Sentinel/tree/master/sentinel-demo\">Sentinel Demo 集锦</a></p>\n<h3>5. 启动 Sentinel 控制台</h3>\n<p>Sentinel 开源控制台支持实时监控和规则管理。接入控制台的步骤如下：</p>\n<p>（1）下载控制台 jar 包并在本地启动：可以参见 <a href=\"./dashboard.md\">此处文档</a>。</p>\n<p>（2）客户端接入控制台，需要：</p>\n<ul>\n<li>客户端需要引入 Transport 模块来与 Sentinel 控制台进行通信。您可以通过 <code>pom.xml</code> 引入 JAR 包:</li>\n</ul>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.alibaba.csp<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>sentinel-transport-simple-http<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1.8.6<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></pre>\n<ul>\n<li>启动时加入 JVM 参数 <code>-Dcsp.sentinel.dashboard.server=consoleIp:port</code> 指定控制台地址和端口。更多的参数参见 <a href=\"./startup-configuration.md\">启动参数文档</a>。</li>\n<li>确保应用端有访问量</li>\n</ul>\n<p>完成以上步骤后即可在 Sentinel 控制台上看到对应的应用，机器列表页面可以看到对应的机器：</p>\n<p><img src=\"https://user-images.githubusercontent.com/9434884/50627838-5cd92800-0f70-11e9-891e-31430adcbbf4.png\" alt=\"machine-discovery\"></p>\n<p>详细介绍和使用文档可参考：<a href=\"./dashboard.md\">Sentinel 控制台文档</a>。</p>\n<h2>公网 Demo</h2>\n<p>若您不希望在本地另启动控制台，可以在本地运行公网 Demo，接入云上版本的 <a href=\"https://github.com/alibaba/Sentinel/wiki/AHAS-Sentinel-%E6%8E%A7%E5%88%B6%E5%8F%B0\">AHAS Sentinel 控制台</a>。这个 Demo 主要是给开发者一个最快最直观的感受，能够最快地感受到：</p>\n<ol>\n<li>Sentinel 多样化的限流手段</li>\n<li>如何所见即所得的配置规则</li>\n<li>如何有效地使用 Sentinel 专业全面的监控数据</li>\n<li>如何通过机器上报来管理机器</li>\n<li>快速体验全托管的集群流控</li>\n</ol>\n<p><strong>HOT</strong>: 推荐采用 <a href=\"https://help.aliyun.com/document_detail/102506.html\">Java Agent 方式</a>快速、无侵入将应用接入到 AHAS 流量防护。最新 (1.9.1+) 版本 agent 兼容部分版本 Spring Cloud Alibaba Sentinel，可直接挂载 agent 接入，无需剔除相关依赖。</p>\n<blockquote>\n<p>注意：若要使用阿里云 AHAS Sentinel 控制台，您需要用自己的阿里云账号登录。由于安全策略原因我们无法提供公共账号。运行了这个 Demo 之后，这个 Demo 将会向 AHAS Sentinel 控制台上报基本的机器信息；同时 AHAS Sentinel 控制台也将会根据上报的信息，通过 Sentinel Transport API 拉取簇点监控信息。如果用户不想要运行这个 Demo，停止即可。Demo 的所有的源码都开放可以下载。</p>\n</blockquote>\n<h3>1. 下载 Demo jar</h3>\n<p>您可以 <a href=\"https://ahasoss-cn-hangzhou.oss-cn-hangzhou.aliyuncs.com/sdk/latest/ahas-sentinel-sdk-demo.jar\">点击此处下载 Sentinel 公网 Demo jar 包</a>。</p>\n<p>此 Demo Jar 主要包含的内容有:</p>\n<ol>\n<li><a href=\"#%E6%9C%AC%E5%9C%B0Demo\">本地 demo 客户端</a> 中已有的 <code>sentinel-core</code>；</li>\n<li>接入 AHAS Sentinel 控制台所需的通信模块 <code>ahas-sentinel-client</code>，用于向控制台上报心跳信息。心跳信息、规则和监控均存于您个人的账号下，其它人均无法访问。</li>\n<li>一个简单的 main 函数，程序类似于：</li>\n</ol>\n<pre><code class=\"language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n    <span class=\"hljs-comment\">// 不断进行资源调用.</span>\n    <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-keyword\">true</span>) {\n        Entry entry = <span class=\"hljs-keyword\">null</span>;\n        <span class=\"hljs-keyword\">try</span> {\n\t        entry = SphU.entry(<span class=\"hljs-string\">\"HelloWorld\"</span>);\n            <span class=\"hljs-comment\">// 资源中的逻辑.</span>\n            System.out.println(<span class=\"hljs-string\">\"hello world\"</span>);\n        } <span class=\"hljs-keyword\">catch</span> (BlockException ex) {\n            System.err.println(<span class=\"hljs-string\">\"blocked!\"</span>);\n        } <span class=\"hljs-keyword\">finally</span> {\n            <span class=\"hljs-keyword\">if</span> (entry != <span class=\"hljs-keyword\">null</span>) {\n                entry.exit();\n            }\n        }\n    }\n}\n</code></pre>\n<p>若您之前接入了开源 Sentinel 控制台，您也可以简单的通过将 pom 文件中 Sentinel 开源相关依赖替换为 <code>ahas-sentinel-client</code> 模块达到同样的目的。</p>\n<h3>2. 开通 AHAS 流控降级并获取启动参数</h3>\n<p>接下来您需要到 <a href=\"https://ahas.console.aliyun.com/\">阿里云控制台</a> 开通 AHAS 功能。可以根据 <a href=\"https://help.aliyun.com/document_detail/90323.html\">开通 AHAS 文档</a> 和 <a href=\"https://help.aliyun.com/document_detail/101410.html\">流控降级 Demo 快速入门</a> 里面的指引进行开通。</p>\n<blockquote>\n<p><strong>注意</strong>：本地运行接入 AHAS Sentinel 控制台需要在页面左上角选择 <strong>公网</strong> 环境。</p>\n</blockquote>\n<p>开通后您可以点击左侧侧边栏的 <strong>流控降级</strong>，进入 Sentinel 控制台应用总览页面。在页面右上角，单击添加应用，选择 SDK 接入页签，到 <strong>配置启动参数</strong> 页签拿到需要的启动参数（详情请参考 <a href=\"https://help.aliyun.com/document_detail/101088.html\">SDK 接入文档</a>），类似于：</p>\n<pre><code class=\"language-bash\">-Dproject.name=AppName -Dahas.license=&lt;License&gt;\n</code></pre>\n<p>其中 <code>project.name</code> 配置项代表应用名（会显示在控制台），<code>ahas.license</code> 配置项代表自己的授权 license（注意保密）。</p>\n<h3>3. 启动 demo</h3>\n<p>接下来我们就可以在本地启动 demo 了，启动应用时需要加上拿到的启动参数：</p>\n<pre><code class=\"language-bash\">java -Dproject.name=&lt;AppName&gt; -Dahas.license=&lt;License&gt; -jar ahas-sentinel-sdk-demo.jar\n</code></pre>\n<p>当应用开始运行后一段时间，我们刷新一下控制台页面，就可以在 AHAS Sentinel 控制台上看到我们的应用了：</p>\n<p><img src=\"https://user-images.githubusercontent.com/9434884/90383206-674b2580-e0b2-11ea-83ca-d3e4934a8c6d.png\" alt=\"image\"></p>\n<p>点击应用卡片，进入详情页面后点击左侧侧边栏的“机器列表”。我们可以在机器列表页面看到刚刚接入的机器，代表接入成功：</p>\n<p><img src=\"https://user-images.githubusercontent.com/9434884/70971365-c39d1600-20db-11ea-9ddc-ec19ae9be40e.png\" alt=\"image\"></p>\n<p>我们可以在监控详情页面查看聚合监控和历史监控图线：</p>\n<p><img src=\"https://user-images.githubusercontent.com/9434884/70971125-2f32b380-20db-11ea-89a8-45c6aaa2ded2.png\" alt=\"AHAS Sentinel Dashboard\"></p>\n<p>AHAS Sentinel 控制台提供了一个我们推荐的推送规则的做法，即 <strong>配置中心控制台/Sentinel 控制台 → 配置中心 → Sentinel 数据源 → Sentinel</strong>，这样的流程就非常清晰了：</p>\n<p><img src=\"https://user-images.githubusercontent.com/9434884/53381986-a0b73f00-39ad-11e9-90cf-b49158ae4b6f.png\" alt=\"Remote push rules to config center\"></p>\n<p>详细介绍和使用文档可参考：<a href=\"https://github.com/alibaba/Sentinel/wiki/AHAS-Sentinel-%E6%8E%A7%E5%88%B6%E5%8F%B0\">AHAS Sentinel 控制台文档</a>。</p>\n"
}